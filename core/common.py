import random
import re
import telebot
from telebot import types
from collections import defaultdict
import threading
import os
from dotenv import load_dotenv  # for parsing .env file


MAX_FILE_SIZE = 2 * 1024 * 1024 # 2 MB
EXPECTED_FORMATS = [".jpg", ".png", ".jpeg", ".webp"]
MAX_TAG_LENGTH = 30
MAX_INLINE_COLS = 3 # max count of columns in inline keyboard
MAX_INLINE_ROWS = 2 # max count of rows in inline keyboard

# once initialize keyboard as global scoped
markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

MAKE_COLLAGE = "–°–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–ª–ª–∞–∂"
LOAD_IMAGE = "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
START = "start"
COMMANDS = [MAKE_COLLAGE, LOAD_IMAGE, START]

get_collage_action = types.KeyboardButton(MAKE_COLLAGE)
load_image_action = types.KeyboardButton(LOAD_IMAGE)

markup.add(get_collage_action, load_image_action)

# Timer for bulk load images
album_timers = defaultdict(threading.Timer)
album_lock = threading.Lock()
AWAITING_FOR_LOAD_IMAGE = "–ñ–¥—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è load_image"

load_dotenv('./config.env')
BOT_API_KEY = os.getenv('BOT_API_KEY')
MEDIA_ROOT = os.getenv('MEDIA_ROOT')


def restart_album_timer(media_group_id):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–ª—å–±–æ–º–∞"""
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –±—ã–ª
    if media_group_id in album_timers:
        album_timers[media_group_id].cancel()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—ã
    timer = threading.Timer(1.0, process_bulk_images, args=[cached_messages[media_group_id]])
    album_timers[media_group_id] = timer
    timer.start()


STATES = {
    AWAITING_FOR_LOAD_IMAGE: False
}

cached_messages = defaultdict(list)

HELLO_MSG = r"""                 
<b><i>–î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç, –≤–∞—à–µ –í–µ–ª–∏—á–µ—Å—Ç–≤–æ!</i></b>                                                                                  

–Ø - —Ä—ã—Ü–∞—Ä—å <b>CollageBot</b>, —á—Ç–æ –±—ã–ª –ø—Ä–∏–∑–≤–∞–Ω –æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ—Ç–æ—Ä–∞—Ñ–∏–∏ –º–æ–∏—Ö —Å—É–∑–µ—Ä–µ–Ω–æ–≤ –∏ –¥–∞–≤–∞—Ç—å –∫ –Ω–∏–º –æ—Ç—Ä—ã—Ç—ã–π –¥–æ—Å—Ç—É–ø. 

 ‚öîÔ∏è –í–æ—Ç –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö:

üó° <code>\load_image</code> ‚Äì —Å –ø–æ–º–æ—â—å—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –≥–æ–ª—É–±–µ–π, –¥–µ–ª–∞—é –≤–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–ª—è –∂–∏—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞.

üó° <code>\get_collage</code> ‚Äì —Å–æ–∑–¥–∞—é –∫–æ–ª–ª–∞–∂ –ø–æ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º, –∏—â–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –≤–µ–ª–∏–∫–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö".
                     """

TAGS_PLS_MSG = r"""
<b><i>–í–∞—à–µ —Å–∏—è—Ç–µ–ª—å—Å—Ç–≤–æ, –æ–Ω–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ!</i></b>

–¢–µ–ø–µ—Ä—å, –ø—Ä–∏—à–ª–∞ –ø–æ—Ä–∞ –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫–∏–µ —Ç–µ–≥–∏ –±—É–¥—É—Ç –∑–∞—â–∏—Ç–Ω–∏–∫–∞–º–∏, —á—Ç–æ–±—ã –≤–∞—à–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞—Ç–µ—Ä—è–ª–æ—Å—å!

üìñ–í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é —Ç–µ–≥–æ–≤:

1. <b>–¢–µ–≥–∏ –ø–∏—à—É—Ç—Å—è —Å —Å–∏–º–≤–æ–ª–æ–º</b> "<b>#</b>", —á—Ç–æ–±—ã –Ω–µ —É–±–µ–∂–∞–ª–∏üëÄ (–ù–∞–ø—Ä–∏–º–µ—Ä: #–∫—Ä–∞—Å–æ—Ç–∞).

2. <b>–ï—Å–ª–∏ –≤ –æ–¥–Ω–æ–º —Ç–µ–≥–µ —Ö–æ—Ç–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, —Ç–æ —Å–º–µ–ª–æ –≤–ø–µ—Ä—ë–¥</b>‚ñ∂Ô∏è (–ù–∞–ø—Ä–∏–º–µ—Ä: #–≥–æ—Ä–¥–æ—Å—Ç—å–∏–ø—Ä–µ–¥—É–±–µ–∂–¥–µ–Ω–∏–µ)

3.  <b>–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ç–µ–≥–∞, —Ç–æ —Ç–æ–≥–¥–∞ –ø–∏—à–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</b>, —è –±–æ—é—Å—å –∫–∞–∫ –∏–º –Ω–µ –±—ã–ª–æ —Ç–µ—Å–Ω–æüë¨ (–ù–∞–ø—Ä–∏–º–µ—Ä: #–≥–æ—Ä–¥–æ—Å—Ç—å–∏–ø—Ä–µ–¥—É–±–µ–∂–¥–µ–Ω–∏–µ #–∫—Ä–∞—Å–æ—Ç–∞ #–¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ)
"""

LOAD_IMAGE_MANUAL_MSG = rf"""
                <b><i>–í–∞—à–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ, —Å–ª—É—à–∞—é—Å—å –∏ –ø–æ–≤–∏–Ω—É—é—Å—å!</i></b>

–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∂–µ–ª–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Å–æ–∫—Ä–æ–≤–∏—â–Ω–∏—Ü—É.

üëë–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–≥–æ –¥–µ–∫—Ä–µ—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤:                                                          

1. <b>–§–æ—Ä–º–∞—Ç</b>: {", ".join(EXPECTED_FORMATS)} (–≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Å–≤–∏—Ç–∫–∏ —Å–≥–Ω–∏—é—Çüìú)

2. <b>–¶–µ–Ω–∑—É—Ä–∞</b>: –Ω–µ 18+ –∫–æ–Ω—Ç–µ–Ω—Ç (üò≠üò≠üò≠)

3. <b>–†–∞–∑–º–µ—Ä</b>: –Ω–µ –±–æ–ª–µ–µ 2MB (–∏–Ω–∞—á–µ –≥–æ–ª—É–±–∏ –Ω–µ –¥–æ–ª–µ—Ç—è—Çüïä)
 
4. <b>–í–∏–¥</b>: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ —Å–∂–∞—Ç–æ–º –≤–∏–¥–µ (–Ω–µ —Ö–æ—á—É –º–∞—Ä–∞—Ç—å –≤–∞—à–∏ –≤–µ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–ª–∞–Ω–∏ü•∞)
                """

UNEXPECTED_MSG = r"""
–í–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ, –≤–∞—à–∏ –∏–∑—Ä–µ—á–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ–∫–æ—Ä–Ω–æ–≥–æ —Å–ª—É–≥–∏, —á—Ç–æ–±—ã –æ–Ω —á—Ç–æ-—Ç–æ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å.üòî
                            
<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.</b>
"""

SUCCESS_MSG = r"""‚úÖ<b>–í—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –≤–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ!
–£–≤–µ—Ä–µ–Ω –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å—É–ª–∏—Ç –±–æ–ª—å—à–∞—è —Å–ª–∞–≤–∞.</b>
"""

USER_MISTAKE_GETUP_MSGS = [
r"""‚ùå<b>–û—à–∏–±–∫–∞.</b>

–í–∞—à–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –æ—à–∏–±–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –≥–æ—Ä–∏—Ç —Ä–≤–µ–Ω–∏–µ–º, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å–ª–µ–¥–æ–≤–∞–ª–∏ –ª–∏ –≤—ã –¥–µ–∫—Ä–µ—Ç—É.
""",

r"""‚ùå<b>–û—à–∏–±–∫–∞.</b>

–ú–æ–π –∫–æ—Ä–æ–ª—å, –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å - –º–∞—Ç—å —É–¥–∞—á–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, —Å–ª–µ–¥—É—è –¥–µ–∫—Ä–µ—Ç—É.
""",

r"""‚ùå<b>–û—à–∏–±–∫–∞.</b>

–í–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ, –ò–µ—Ä—É—Å–∞–ª–∏–º –Ω–µ –∑–∞ 1 –¥–µ–Ω—å –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ –∏ –Ω–µ —Ä–∞–∑, –Ω–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å, –¥–µ–∫—Ä–µ—Ç –≤–∞–º —É–∫–∞–∂–µ—Ç –ø—É—Ç—å.
""",

r"""‚ùå<b>–û—à–∏–±–∫–∞.</b>

–í–∞—à–µ –≤–µ–ª–∏—á–µ—Å—Ç–≤–æ, —è —Å –≤–∞–º–∏ –¥–æ –∫–æ–Ω—Ü–∞, –Ω–µ –æ–ø—É—Å–∫–∞–π—Ç–µ —Ä—É–∫, –¥–µ–∫—Ä–µ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –Ω–µ –æ—à–∏–±–∞—Ç—å—Å—è.
"""
]

def user_mistake_msg() -> str:
    return random.choice(USER_MISTAKE_GETUP_MSGS)

def is_valid_tags(hashtags: list[str]) -> tuple[bool, list[str]]:
    errors = []
    res = True
    if not hashtags:
        errors.append("@topShizoid - empty tags list msg :: common.py")
        res = False

    for tag in hashtags:
        # if not tag.startswith('#'):
        #     errors.append(f"@topShizoid - invalid tag's {tag} start msg :: common.py")
        #     res = False

        if len(tag) > MAX_TAG_LENGTH:
            errors.append(f"@topShizoid - too large tag {tag} msg :: common.py")
            res = False

        # if not re.fullmatch(r'#\w+', tag):
        #     errors.append(f"@topShizoid - invalid tag's {tag} syntax msg :: common.py")
        #     res = False

    return (res, errors)